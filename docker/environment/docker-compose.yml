version: '3.8'

services:
    nginx:
        image: rogerdz/nginx
        labels:
            - traefik.enable=true

            # HTTP traffic
            - traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}.rule=Host(`${VIRTUAL_HOST}`)
            - traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}.entrypoints=http
            - traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}.service=nginx-${COMPOSE_PROJECT_NAME}
            - traefik.http.services.nginx-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=80

            # HTTPS traffic
            - traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}-https.rule=Host(`${VIRTUAL_HOST}`)
            - traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}-https.entrypoints=https
            - traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}-https.service=nginx-${COMPOSE_PROJECT_NAME}-https
            - traefik.http.services.nginx-${COMPOSE_PROJECT_NAME}-https.loadbalancer.server.port=443
            - traefik.http.services.nginx-${COMPOSE_PROJECT_NAME}-https.loadbalancer.server.scheme=https

            # Redirect all http requests to https
            # - traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}.middlewares=https-redirect@file
        networks:
            proxy:
            internal:
        environment:
            UID: ${DOCKER_UID:-1000}
            GID: ${DOCKER_GID:-1000}
            WORK_DIR: ${WORK_DIR}
            VIRTUAL_HOST: ${VIRTUAL_HOST}
        volumes:
            - ./nginx-sites.conf:/etc/nginx/templates/default.conf.template:ro
            - ${WORK_DIR}:${WORK_DIR}:cached
        restart: &restart unless-stopped
        logging: &logging
            options:
                max-size: "10m"
                max-file: "3"
        # depends_on:
            # - php

    # httpd:
    #     image: rogerdz/httpd
    #     networks:
    #         - internal
    #     environment:
    #         UID: ${DOCKER_UID:-1000}
    #         GID: ${DOCKER_GID:-1000}
    #         WORK_DIR: ${WORK_DIR}
    #     volumes:
    #         - ./httpd.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf
    #         - ${WORK_DIR}:${WORK_DIR}:cached
    #     restart: *restart
    #     logging: *logging
    #     depends_on:
    #         - php

    # php:
    #     image: rogerdz/php-fpm:${PHP_VERSION}
    #     networks: &php-network
    #         internal:
    #         mail:
    #         gateway:
    #     environment: &php-env
    #         UID: ${DOCKER_UID:-1000}
    #         GID: ${DOCKER_GID:-1000}
    #         PHP_EXTENSIONS_ENABLE: ${PHP_EXTENSIONS_ENABLE}
    #         # XDEBUG_REMOTE_ENABLE: 1
    #     volumes: &php-volumes
    #         - ${WORK_DIR}:${WORK_DIR}:cached
    #         # - ./env.php:${WORK_DIR}/app/etc/env.php
    #         - ./php-custom.ini:/usr/local/etc/php/conf.d/custom.ini:ro
    #         - ./smtp:/etc/msmtprc:ro
    #         - ${CA_STORE:-/usr/local/share/ca-certificates}:/usr/local/share/ca-certificates:ro
    #         - ~/.composer:/home/dev/.composer:delegated
    #         - ~/.ssh:/home/dev/.ssh:delegated
    #     extra_hosts: &php-extra-hosts
    #         - "host.docker.internal:host-gateway"
    #     external_links: &php-external-links
    #         - "proxy:${VIRTUAL_HOST}"
    #     cap_add:
    #         - SYS_PTRACE
    #     restart: *restart
    #     logging: *logging
    #     hostname: php-${COMPOSE_PROJECT_NAME}-docker

    # cli:
    #     image: rogerdz/php-fpm:${PHP_VERSION}-cli
    #     labels:
    #         - traefik.enable=true
    #         - traefik.http.routers.livereload-${COMPOSE_PROJECT_NAME}.rule=Host(`${VIRTUAL_HOST}`) && (Path(`/livereload.js`) || Path(`/livereload`))
    #         - traefik.http.routers.livereload-${COMPOSE_PROJECT_NAME}.priority=10000
    #         - traefik.http.routers.livereload-${COMPOSE_PROJECT_NAME}.entrypoints=http,https
    #         - traefik.http.services.livereload-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=35729
    #     networks:
    #         <<: *php-network
    #         proxy:
    #     env_file: blackfire.env
    #     environment:
    #         <<: *php-env
    #         COMPOSER_VERSION: ${COMPOSER_VERSION}
    #         # XDEBUG_REMOTE_ENABLE: 1
    #     volumes: *php-volumes
    #     extra_hosts: *php-extra-hosts
    #     external_links: *php-external-links
    #     user: dev
    #     tty: true
    #     stdin_open: true
    #     init: true
    #     working_dir: ${WORK_DIR}
    #     restart: *restart
    #     logging: *logging
    #    hostname: cli-${COMPOSE_PROJECT_NAME}-docker

    db:
        image: ${DATABASE_ENGINE}:${DATABASE_ENGINE_VERSION}
        environment:
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_DATABASE=${MYSQL_DATABASE}
        volumes:
            - ./mysql.cnf:/etc/mysql/conf.d/custom.cnf:ro
            - db_data:/var/lib/mysql
        command: --default-authentication-plugin=mysql_native_password
        networks:
            - internal
            - database
        restart: *restart
        logging: *logging

    # search-engine:
    #     image: rogerdz/${SEARCH_ENGINE}:${SEARCH_ENGINE_VERSION}
    #     labels:
    #         - traefik.enable=true
    #         - traefik.http.routers.search-engine-${COMPOSE_PROJECT_NAME}.rule=Host(`${VIRTUAL_HOST}`)
    #         - traefik.http.routers.search-engine-${COMPOSE_PROJECT_NAME}.priority=10000
    #         - traefik.http.routers.search-engine-${COMPOSE_PROJECT_NAME}.entrypoints=p9200
    #         - traefik.http.routers.search-engine-${COMPOSE_PROJECT_NAME}.service=search-engine-${COMPOSE_PROJECT_NAME}
    #         - traefik.http.services.search-engine-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=9200
    #     environment:
    #         - DISABLE_INSTALL_DEMO_CONFIG=true
    #         - DISABLE_SECURITY_PLUGIN=true
    #         - "ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms64m -Xmx512m}"
    #         - "OPENSEARCH_JAVA_OPTS=${ES_JAVA_OPTS:--Xms64m -Xmx512m}"
    #         - node.name=${COMPOSE_PROJECT_NAME}
    #         - node.store.allow_mmap=false
    #         - cluster.routing.allocation.disk.watermark.low=2gb
    #         - cluster.routing.allocation.disk.watermark.high=1gb
    #         - cluster.routing.allocation.disk.watermark.flood_stage=512mb
    #         - cluster.info.update.interval=120s
    #         - http.cors.enabled=true
    #         - http.cors.allow-origin=/.*/
    #     ulimits:
    #         memlock:
    #             soft: -1
    #             hard: -1
    #     volumes:
    #         - elasticsearch_data:/usr/share/${SEARCH_ENGINE}/data
    #     networks:
    #         internal:
    #             aliases:
    #                 - elasticsearch
    #                 - opensearch
    #         esnet:
    #         proxy:
    #     init: true
    #     restart: *restart
    #     logging: *logging

    adminer:
        image: adminer
        labels:
            - traefik.enable=true
            - traefik.http.routers.adminer-${COMPOSE_PROJECT_NAME}.rule=Host(`${VIRTUAL_HOST}`) && PathPrefix(`/adminer/`)
            - traefik.http.routers.adminer-${COMPOSE_PROJECT_NAME}.priority=10000
            - traefik.http.routers.adminer-${COMPOSE_PROJECT_NAME}.entrypoints=http,https
            - traefik.http.routers.adminer-${COMPOSE_PROJECT_NAME}.middlewares=adminer-stripprefix@file
            - traefik.http.services.adminer-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8080
        environment:
            ADMINER_PLUGINS: tables-filter json-column table-indexes-structure
            ADMINER_DEFAULT_USERNAME: ${MYSQL_USER}
            ADMINER_DEFAULT_PASSWORD: ${MYSQL_PASSWORD}
            ADMINER_DEFAULT_DATABASE: ${MYSQL_DATABASE}
        networks:
            - proxy
            - internal
        restart: *restart
        logging: *logging

    # cron:
    #     image: rogerdz/crontab
    #     environment:
    #         - CRONTAB_PROJECT=${COMPOSE_PROJECT_NAME}
    #     networks:
    #         - internal
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock:ro
    #         - ./cron.json:/opt/crontab/config.json:ro
    #     restart: *restart
    #     logging: *logging
    #     depends_on:
    #         - cli

    # redis:
    #     image: redis:${REDIS_VERSION}
    #     command: redis-server /usr/local/etc/redis/redis.conf
    #     networks:
    #         - internal
    #     volumes:
    #         - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    #         - redis_data:/data
    #     restart: *restart
    #     logging: *logging

    # varnish:
    #     image: rogerdz/varnish:${VARNISH_VERSION}
    #     environment:
    #         - VARNISH_SIZE=${VARNISH_SIZE}
    #     networks:
    #         - internal
    #     volumes:
    #         - ./varnish.vcl:/etc/varnish/default.vcl:ro
    #     restart: *restart
    #     logging: *logging
    #     depends_on:
    #         - nginx

    # selenium:
    #     image: rogerdz/selenium:standalone-${SELENIUM_BROWSER:-chrome}
    #     labels:
    #         - traefik.enable=true
    #         - traefik.http.routers.selenium-${COMPOSE_PROJECT_NAME}.rule=Host(`${VIRTUAL_HOST}`)
    #         - traefik.http.routers.selenium-${COMPOSE_PROJECT_NAME}.priority=10000
    #         - traefik.http.routers.selenium-${COMPOSE_PROJECT_NAME}.entrypoints=p7900
    #         - traefik.http.routers.selenium-${COMPOSE_PROJECT_NAME}.service=selenium-${COMPOSE_PROJECT_NAME}
    #         - traefik.http.services.selenium-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=7900
    #     shm_size: 2gb
    #     environment:
    #         SE_VNC_NO_PASSWORD: 1
    #     volumes:
    #         - ${CA_STORE:-/usr/local/share/ca-certificates}:/usr/local/share/ca-certificates:ro
    #     networks:
    #         - proxy
    #         - internal
    #     external_links: *php-external-links
    #     init: true
    #     restart: *restart
    #     logging: *logging

    # allure:
    #     image: frankescobar/allure-docker-service
    #     labels:
    #         - traefik.enable=true
    #         - traefik.http.routers.allure-${COMPOSE_PROJECT_NAME}.rule=Host(`${VIRTUAL_HOST}`) && PathPrefix(`/allure/`)
    #         - traefik.http.routers.allure-${COMPOSE_PROJECT_NAME}.priority=10000
    #         - traefik.http.routers.allure-${COMPOSE_PROJECT_NAME}.entrypoints=http,https
    #         - traefik.http.routers.allure-${COMPOSE_PROJECT_NAME}.service=allure-${COMPOSE_PROJECT_NAME}
    #         - traefik.http.services.allure-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=5050
    #         - traefik.http.routers.allure-${COMPOSE_PROJECT_NAME}.middlewares=allure-redirectregex@file
    #     environment:
    #         URL_PREFIX: "/allure"
    #         CHECK_RESULTS_EVERY_SECONDS: 5
    #         OPTIMIZE_STORAGE: 1
    #     user: root
    #     volumes:
    #         - allure_data:/app/allure-results
    #         - ${ALLURE_UNIT_TEST_RESULT_DIR:-allure_data}:/app/projects/unit/results:delegated
    #         - ${ALLURE_INTEGRATION_TEST_RESULT_DIR:-allure_data}:/app/projects/integration/results:delegated
    #         - ${ALLURE_MFTF_TEST_RESULT_DIR:-allure_data}:/app/projects/mftf/results:delegated
    #     networks:
    #         - proxy
    #         - internal
    #     init: true
    #     restart: *restart
    #     logging: *logging

    rabbitmq:
        image: rabbitmq:${RABBITMQ_VERSION}-management
        labels:
            - traefik.enable=true
            - traefik.http.routers.rabbitmq-${COMPOSE_PROJECT_NAME}.rule=Host(`${VIRTUAL_HOST}`) && PathPrefix(`/rabbitmq/`)
            - traefik.http.routers.rabbitmq-${COMPOSE_PROJECT_NAME}.priority=10000
            - traefik.http.routers.rabbitmq-${COMPOSE_PROJECT_NAME}.entrypoints=http,https
            - traefik.http.routers.rabbitmq-${COMPOSE_PROJECT_NAME}.middlewares=rabbitmq-stripprefix@file
            - traefik.http.services.rabbitmq-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=15672
        environment:
            RABBITMQ_ERLANG_COOKIE: cluster_cookie
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
        networks:
            - proxy
            - internal
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        restart: *restart
        logging: *logging

    # browser-sync:
    #     image: rogerdz/browser-sync
    #     labels:
    #         - traefik.enable=true
    #         # HTTP traffic
    #         - traefik.http.routers.browser-sync-${COMPOSE_PROJECT_NAME}.rule=Host(`bs.${VIRTUAL_HOST}`)
    #         - traefik.http.routers.browser-sync-${COMPOSE_PROJECT_NAME}.entrypoints=http
    #         - traefik.http.routers.browser-sync-${COMPOSE_PROJECT_NAME}.service=browser-sync-${COMPOSE_PROJECT_NAME}
    #         - traefik.http.services.browser-sync-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=80
    #         # HTTPS traffic
    #         - traefik.http.routers.browser-sync-${COMPOSE_PROJECT_NAME}-https.rule=Host(`bs.${VIRTUAL_HOST}`)
    #         - traefik.http.routers.browser-sync-${COMPOSE_PROJECT_NAME}-https.entrypoints=https
    #         - traefik.http.routers.browser-sync-${COMPOSE_PROJECT_NAME}-https.service=browser-sync-${COMPOSE_PROJECT_NAME}-https
    #         - traefik.http.services.browser-sync-${COMPOSE_PROJECT_NAME}-https.loadbalancer.server.port=443
    #         - traefik.http.services.browser-sync-${COMPOSE_PROJECT_NAME}-https.loadbalancer.server.scheme=https
    #     networks:
    #         - proxy
    #         - internal
    #     environment:
    #         BROWSER_SYNC_PROXY: https://${VIRTUAL_HOST}
    #         BROWSER_SYNC_FILES: 'app/**/*.phtml, app/**/*.xml, app/**/*.css, app/**/*.js, vendor/**/*.css, vendor/**/*.js'
    #         VIRTUAL_HOST: bs.${VIRTUAL_HOST}
    #     volumes:
    #         - ${WORK_DIR}:/src:cached
    #         - ${CA_STORE:-/usr/local/share/ca-certificates}:/usr/local/share/ca-certificates:ro
    #     init: true
    #     external_links: *php-external-links
    #     restart: *restart
    #     logging: *logging

    # newrelic:
    #     image: newrelic/php-daemon
    #     networks:
    #         - internal
    #     restart: *restart
    #     logging: *logging

    # zookeeper:
    #     image: zookeeper
    #     networks:
    #         - internal
    #     volumes:
    #         - zookeeper_data:/data
    #         - zookeeper_logs:/logs
    #         - zookeeper_datalog:/datalog
    #     restart: *restart
    #     logging: *logging

    # blackfire:
    #     image: blackfire/blackfire
    #     env_file: blackfire.env
    #     networks:
    #         - internal
    #     restart: *restart
    #     logging: *logging

networks:
    proxy:
        external: true
    gateway:
        external: true
    database:
        external: true
    mail:
        external: true
    esnet:
        external: true
    internal:
        driver: bridge

volumes:
    ? db_data
    ? elasticsearch_data
    ? redis_data
    ? rabbitmq_data
    ? zookeeper_data
    ? zookeeper_logs
    ? zookeeper_datalog
    ? allure_data
